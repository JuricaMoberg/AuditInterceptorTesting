// <auto-generated />
using System;
using EfCoreTesting;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EfCoreTesting.Migrations
{
    [DbContext(typeof(AuditableEntityInterceptorContext))]
    partial class AuditableEntityInterceptorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EfCoreTesting.AuditEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NewSerializedProperties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldSerializedProperties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SaveChangesKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuditEntries");
                });

            modelBuilder.Entity("EfCoreTesting.OptionalChildTestEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("OptionalChildTestEntities");
                });

            modelBuilder.Entity("EfCoreTesting.TestEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OptionalChildTestEntityId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OptionalChildTestEntityId");

                    b.ToTable("TestEntities");
                });

            modelBuilder.Entity("EfCoreTesting.TestEntityLong", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TestEntityLongs");
                });

            modelBuilder.Entity("EfCoreTesting.TestEntity", b =>
                {
                    b.HasOne("EfCoreTesting.OptionalChildTestEntity", "OptionalChildTestEntity")
                        .WithMany("TestEntities")
                        .HasForeignKey("OptionalChildTestEntityId");

                    b.Navigation("OptionalChildTestEntity");
                });

            modelBuilder.Entity("EfCoreTesting.OptionalChildTestEntity", b =>
                {
                    b.Navigation("TestEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
